Helm is a package manager to define, install, upgrade, and rollback Kubernetes applications. 
	
	https://helm.sh/docs/helm/


<-- Prerep
	- need a k8s cluster
		Docker Desktop can be configured with a kubernetes cluster
		
		verify: kubectl get nodes



<-- Tutorial
	- search repo
		helm search repo [APPNAME, ie mysql]

	- status of release
		helm status [release-name] 

	- helm install [RELEASE-NAME] [CHART-NAME]
		* basic: straight from repo 
			helm install my-panda bitnami/wordpress

			will installk8s: namesparce, network policy, resource quota, secret, secretList, etc..

		* provide own value
			show values needed by chart
				helm show values [chart, ie bitnami/wordpress]

			copy values into a yaml file
				echo '{mariadb.auth.database: user0db, mariadb.auth.username: user0}' > values.yaml

			install using value file
				helm install -f values.yaml bitnami/wordpress --generate-name


	- Upgrade a release
		* Via a new values.yaml
			help upgrade -f newvalues.yaml [RELEASE] [CHART]

			check value took effect
				helm get values [RELEASE]

	- Roll back
		helm rollback [RELEASE] [VERSION]
			version=1 --> first release

	- helm uninstall [release]

	- See currently deployed releases
		helm list



<-- Example: LNP chart
	Note came from Task-LNP-Commonify
	
	Create deployment via helm
		cd svc-perf-lnp/deployment/helm

		if production
			helmProxyReset --> helmProxySet

		helm install| upgrade [RELEASE] [CHART] [flags]
			
			Dry-run:
				helm install nlp-lnp-r01 -n nlp-lnp-ns . -f values-prod.yaml --dry-run --debug
					. refers to Chart.yaml

					use aliase: helmLnp

					helm template nlp-lnp-r01 -n nlp-lnp-ns . -f values-prod.yaml > temp/deployment.yaml

			Deploy:
				helm install nlp-lnp-r01 -n nlp-lnp-ns . -f values-dev.yaml

		Check
			tk --context=fcp -n nlp-lnp-ns get deployment
			tk --context=fcp -n nlp-lnp-ns get service
			tk --context=fcp -n nlp-lnp-ns get pods
			tk --context=fcp -n nlp-lnp-ns get deployment,service

		Delete
			helm uninstall nlp-lnp-r01 -n nlp-lnp-ns
			helmLnp uninstall nlp-lnp-r01

		Update
			helm upgrade nlp-lnp-r01 -n nlp-lnp-ns . -f values-prod.yaml
			helm upgrade nlp-lnp-r01 . -f values-prod.yaml

		UI:
			once the service object comes up, use the external ip to the browser. Do not need the port.

		Debug
			tkCmdSwitchCluster 130
				This is important and makes it easier to work as we don't need to enter the cluster info.

			cd helm
				helmLnp lint

			helm -n nlp-lnp-ns list --all

			helm -n nlp-lnp-ns get manifest [RELEASE-NAME]
				helm -n nlp-lnp-ns get manifest nlp-lnp-r01

			helmLnp history nlp-lnp-r01

			helmLnp status nlp-lnp-r01

			tkLnp get deployment,rs,service

			tkLnp describe deployment/nlp-lnp-app


			tess kubectl --context=fcp -n nlp-lnp-ns describe deployment/nlp-lnp-app




Example: Ebert deployment

	source: stack@ebertdeploy-4356527:~/ebert_deploy/deployment/tess-setup/bert-deployment


	Step1: Update the ebertmv50.yaml
		This file contains the values ninjax uses to replace the yaml files. The values inserted comes from the config/*.yaml

		kubernetes resources/templates
			federated_deployment.yaml

				.Values.replicatCount --> defined in config/erbert50.yaml

				template "pynlp.appinstancename" --> defined by _helpers.tpl, which is mapped to Values. --> config/ebert50.yaml
					tpl are helm's named template, while are template defined in a file
						{{- define "pynlp.nameservicename" -}}
						{{- default .Values.name .Values.nameservicename | trunc 63 | trimSuffix "-" -}}
						{{- end -}}


					use this definition in other kubernetes template like so. Ex: swift_configmap.yaml
						 namespace: {{ template "pynlp.namespace" . }}

			nameservice
			seift_configmap
			swift_secret
			tfap


	Step2: Create the requisite resources
		dry run
			dry run will create the kubernetes resources:  account, appInstance, application, group, namespace

			python script/createTessSetup.py -f ../config/ebertmv50.yaml -u thchang --output_dir ebertmv50 --dryrun


	Step3: Check the requisite kubernetes resources
		tk --cluster=33 -n ebertmv50 get ai

		Debug
			tk --cluster=130 -n ebertmv50 get pods

			tk --context=130 -n ebertmv50 log ebertmv50-7478579f8-864v4 -c swift-download
				Images created from repo: https://github.corp.ebay.com/NLP/pynlp-model-initiator


			tk --cluster=130 -n ebertmv50 get configmap

			need to check swift-yaml 
				echo base64 of the yaml


	Step4: Install chart via helm
		helm install -f myvalues.yaml myredis ./redis
			./redis is a path to a unpacked chart directory
			myredis is the chart name

		cd deployment/helm	
		helm install -n krylov-training-nlp . -f values-prod.yaml yaml --dry-run


		helm install ebert50-1.0.o -n ebertmv50 . -f config/ebert50.yaml --dry-run

		helm install ebert50-1.0.o -n ebertmv50 . -f config/ebert50.yaml

		helm upgrade ebert50-1.0.o -n ebertmv50 . -f config/ebert50.yaml

		helm uninstall ebert50-1.0.o -n ebertmv50 . -f config/ebert50.yaml

		
	Step4: Test
		tk --cluster=fcp describe nameservice ebertmv50


		tess kubectl -cluster=130 -n ebertmv50 describe deployment 

		tk --cluster=130 -n ebertmv50 get pods

		tk --context=130 -n ebertmv50 log ebertmv50-7478579f8-864v4 -c swift-download

		tk --cluster=130 -n ebertmv50 get configmap
