// -------------------------------------
// Workflow
// -------------------------------------
- Checkout dev branch
	git check out master -b dev-XYZ

- If project has .scalafmt.conf, see
	Scratchpad/ "Tools - Sbt and Scala and Java"
		"Formatting"
	Idea: set up intellij preference --> editor --> scala


- Do code changes

	Bump up version.sbt

- Verify 
	no warnings or error
		sbt clean 
		sbt compile
		sbt test

- git push
	Will kick off compilation

- pull Reguest
	Add reviewer

	Review back and forth

- Once approver approves
	If there is a conflict 

	local mac
		master branch
			git fetch origin
			git pull
		dev-branch
			git rebase -i master
			git push

		Ask for approval again..



- If conflict, DO NOT use either gitlab's merge global or local.
	(1) Via UI: Merge via UI
	(2) Merge locally
		good if you want to do more tests

		Flow:
			 git fetch origin
			 git checkout -b 'tom-upgrade-scala-2.13-merge' 'origin/tom-upgrade-scala-2.13'

			 Test locally

			 git fetch origin
			 git checkout 'master'
			 git merge --no-ff 'tom-upgrade-scala-2.13-merge'
			 	resolve local conflicts

		Ran into issue with git merge --no-ff
			hint: Updates were rejected because the tip of your current branch is behind
			hint: its remote counterpart. Integrate the remote changes (e.g.
			hint: 'git pull ...') before pushing again.
			hint: See the 'Note about fast-forwards' in 'git push --help' for details.


			Perhhaps I should do this next time:
				hint:   git config pull.rebase false  # merge (the default strategy)
				hint:   git config pull.rebase true   # rebase
				hint:   git config pull.ff only       # fast-forward only





- If opensource, ie acdc, then need to follow git fork development flow
	https://github.com/salesforce/acdc/pull/37/files

- Merge process will kick off pipeline build